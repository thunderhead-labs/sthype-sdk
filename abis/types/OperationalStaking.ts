/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface OperationalStakingInterface extends utils.Interface {
  functions: {
    "CQT()": FunctionFragment;
    "DEFAULT_DELEGATOR_MIN_STAKE()": FunctionFragment;
    "DEFAULT_VALIDATOR_ENABLE_MIN_STAKE()": FunctionFragment;
    "DIVIDER()": FunctionFragment;
    "REWARD_REDEEM_THRESHOLD()": FunctionFragment;
    "addValidator(address,uint128)": FunctionFragment;
    "checkDelegatorExists(address)": FunctionFragment;
    "delegatorCoolDown()": FunctionFragment;
    "delegatorMinStake()": FunctionFragment;
    "depositRewardTokens(uint128)": FunctionFragment;
    "disableValidator(uint128)": FunctionFragment;
    "enableValidator(uint128)": FunctionFragment;
    "freezeValidator(uint128,string)": FunctionFragment;
    "getAllValidatorsMetadata()": FunctionFragment;
    "getDelegatorMetadata(address,uint128)": FunctionFragment;
    "getDelegatorTotalLocked(address)": FunctionFragment;
    "getMetadata()": FunctionFragment;
    "getValidatorCompoundedStakingData(uint128)": FunctionFragment;
    "getValidatorMetadata(uint128)": FunctionFragment;
    "getValidatorStakingData(uint128)": FunctionFragment;
    "getValidatorsCompoundedStakes()": FunctionFragment;
    "getValidatorsMetadata(uint128,uint128)": FunctionFragment;
    "initialize(address,uint128,uint128,uint128,uint128,uint128)": FunctionFragment;
    "isValidatorEnabled(uint128)": FunctionFragment;
    "maxCapMultiplier()": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "recoverUnstaking(uint128,uint128,uint128)": FunctionFragment;
    "recoverUnstakingCoolDown()": FunctionFragment;
    "redeemAllCommission(uint128,address)": FunctionFragment;
    "redeemAllRewards(uint128,address)": FunctionFragment;
    "redeemCommission(uint128,address,uint128)": FunctionFragment;
    "redeemRewards(uint128,address,uint128)": FunctionFragment;
    "redelegateUnstaked(uint128,uint128,uint128,uint128)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewardPool()": FunctionFragment;
    "rewardValidators(uint128,uint128[],uint128[])": FunctionFragment;
    "setDelegatorCoolDown(uint128)": FunctionFragment;
    "setDelegatorMinStake(uint128)": FunctionFragment;
    "setMaxCapMultiplier(uint128)": FunctionFragment;
    "setRecoverUnstakingCoolDown(uint128)": FunctionFragment;
    "setStakingManagerAddress(address)": FunctionFragment;
    "setValidatorAddress(uint128,address)": FunctionFragment;
    "setValidatorCommissionRate(uint128,uint128)": FunctionFragment;
    "setValidatorCoolDown(uint128)": FunctionFragment;
    "setValidatorEnableMinStake(uint128)": FunctionFragment;
    "setValidatorMaxStake(uint128)": FunctionFragment;
    "stake(uint128,uint128)": FunctionFragment;
    "stakingManager()": FunctionFragment;
    "takeOutRewardTokens(uint128)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "transferUnstakedOut(uint128,uint128,uint128)": FunctionFragment;
    "unfreezeValidator(uint128)": FunctionFragment;
    "unpause()": FunctionFragment;
    "unstake(uint128,uint128)": FunctionFragment;
    "unstakeAll(uint128)": FunctionFragment;
    "validatorCoolDown()": FunctionFragment;
    "validatorEnableMinStake()": FunctionFragment;
    "validatorMaxStake()": FunctionFragment;
    "validatorsN()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "CQT"
      | "DEFAULT_DELEGATOR_MIN_STAKE"
      | "DEFAULT_VALIDATOR_ENABLE_MIN_STAKE"
      | "DIVIDER"
      | "REWARD_REDEEM_THRESHOLD"
      | "addValidator"
      | "checkDelegatorExists"
      | "delegatorCoolDown"
      | "delegatorMinStake"
      | "depositRewardTokens"
      | "disableValidator"
      | "enableValidator"
      | "freezeValidator"
      | "getAllValidatorsMetadata"
      | "getDelegatorMetadata"
      | "getDelegatorTotalLocked"
      | "getMetadata"
      | "getValidatorCompoundedStakingData"
      | "getValidatorMetadata"
      | "getValidatorStakingData"
      | "getValidatorsCompoundedStakes"
      | "getValidatorsMetadata"
      | "initialize"
      | "isValidatorEnabled"
      | "maxCapMultiplier"
      | "owner"
      | "pause"
      | "paused"
      | "recoverUnstaking"
      | "recoverUnstakingCoolDown"
      | "redeemAllCommission"
      | "redeemAllRewards"
      | "redeemCommission"
      | "redeemRewards"
      | "redelegateUnstaked"
      | "renounceOwnership"
      | "rewardPool"
      | "rewardValidators"
      | "setDelegatorCoolDown"
      | "setDelegatorMinStake"
      | "setMaxCapMultiplier"
      | "setRecoverUnstakingCoolDown"
      | "setStakingManagerAddress"
      | "setValidatorAddress"
      | "setValidatorCommissionRate"
      | "setValidatorCoolDown"
      | "setValidatorEnableMinStake"
      | "setValidatorMaxStake"
      | "stake"
      | "stakingManager"
      | "takeOutRewardTokens"
      | "transferOwnership"
      | "transferUnstakedOut"
      | "unfreezeValidator"
      | "unpause"
      | "unstake"
      | "unstakeAll"
      | "validatorCoolDown"
      | "validatorEnableMinStake"
      | "validatorMaxStake"
      | "validatorsN"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "CQT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_DELEGATOR_MIN_STAKE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_VALIDATOR_ENABLE_MIN_STAKE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "DIVIDER", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "REWARD_REDEEM_THRESHOLD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addValidator",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "checkDelegatorExists",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "delegatorCoolDown",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "delegatorMinStake",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositRewardTokens",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "disableValidator",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "enableValidator",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "freezeValidator",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllValidatorsMetadata",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDelegatorMetadata",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDelegatorTotalLocked",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMetadata",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getValidatorCompoundedStakingData",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getValidatorMetadata",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getValidatorStakingData",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getValidatorsCompoundedStakes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getValidatorsMetadata",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidatorEnabled",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "maxCapMultiplier",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "recoverUnstaking",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "recoverUnstakingCoolDown",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeemAllCommission",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemAllRewards",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemCommission",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemRewards",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "redelegateUnstaked",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardValidators",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setDelegatorCoolDown",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDelegatorMinStake",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxCapMultiplier",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRecoverUnstakingCoolDown",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setStakingManagerAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setValidatorAddress",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setValidatorCommissionRate",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setValidatorCoolDown",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setValidatorEnableMinStake",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setValidatorMaxStake",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "stakingManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "takeOutRewardTokens",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferUnstakedOut",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "unfreezeValidator",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "unstakeAll",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "validatorCoolDown",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "validatorEnableMinStake",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "validatorMaxStake",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "validatorsN",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "CQT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_DELEGATOR_MIN_STAKE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_VALIDATOR_ENABLE_MIN_STAKE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "DIVIDER", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "REWARD_REDEEM_THRESHOLD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkDelegatorExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegatorCoolDown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegatorMinStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositRewardTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "freezeValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllValidatorsMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDelegatorMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDelegatorTotalLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValidatorCompoundedStakingData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValidatorMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValidatorStakingData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValidatorsCompoundedStakes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValidatorsMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isValidatorEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxCapMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recoverUnstaking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoverUnstakingCoolDown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemAllCommission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemAllRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemCommission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redelegateUnstaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewardPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardValidators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDelegatorCoolDown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDelegatorMinStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxCapMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRecoverUnstakingCoolDown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStakingManagerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setValidatorAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setValidatorCommissionRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setValidatorCoolDown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setValidatorEnableMinStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setValidatorMaxStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakingManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "takeOutRewardTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferUnstakedOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unfreezeValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unstakeAll", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "validatorCoolDown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validatorEnableMinStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validatorMaxStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validatorsN",
    data: BytesLike
  ): Result;

  events: {
    "AllocatedTokensTaken(uint128)": EventFragment;
    "CommissionRewardRedeemed(uint128,address,uint128)": EventFragment;
    "DelegatorMinStakeChanged(uint128)": EventFragment;
    "DelegatorUnstakeCooldownChanged(uint128)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "InitializedSemantics(address,uint128,uint128,uint128,uint128,uint128,uint128,uint128)": EventFragment;
    "MaxCapMultiplierChanged(uint128)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "RecoverUnstakeCooldownChanged(uint128)": EventFragment;
    "RecoveredUnstake(uint128,address,uint128,uint128)": EventFragment;
    "Redelegated(uint128,uint128,address,uint128,uint128)": EventFragment;
    "RewardFailedDueValidatorDisabled(uint128,uint128)": EventFragment;
    "RewardFailedDueValidatorFrozen(uint128,uint128)": EventFragment;
    "RewardFailedDueZeroStake(uint128,uint128)": EventFragment;
    "RewardRedeemed(uint128,address,uint128)": EventFragment;
    "RewardTokensDeposited(uint128)": EventFragment;
    "RewardsDisbursed(uint128)": EventFragment;
    "Staked(uint128,address,uint128)": EventFragment;
    "StakingManagerChanged(address)": EventFragment;
    "Unpaused(address)": EventFragment;
    "UnstakeRedeemed(uint128,address,uint128,uint128)": EventFragment;
    "Unstaked(uint128,address,uint128,uint128)": EventFragment;
    "ValidatorAdded(uint128,uint128,address)": EventFragment;
    "ValidatorAddressChanged(uint128,address)": EventFragment;
    "ValidatorCommissionRateChanged(uint128,uint128)": EventFragment;
    "ValidatorDisabled(uint128,uint256)": EventFragment;
    "ValidatorEnableMinStakeChanged(uint128)": EventFragment;
    "ValidatorEnabled(uint128)": EventFragment;
    "ValidatorFrozen(uint128,string)": EventFragment;
    "ValidatorMaxCapChanged(uint128)": EventFragment;
    "ValidatorUnfrozen(uint128)": EventFragment;
    "ValidatorUnstakeCooldownChanged(uint128)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AllocatedTokensTaken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CommissionRewardRedeemed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DelegatorMinStakeChanged"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "DelegatorUnstakeCooldownChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InitializedSemantics"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MaxCapMultiplierChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RecoverUnstakeCooldownChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RecoveredUnstake"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Redelegated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RewardFailedDueValidatorDisabled"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RewardFailedDueValidatorFrozen"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardFailedDueZeroStake"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardRedeemed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardTokensDeposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsDisbursed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Staked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakingManagerChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnstakeRedeemed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unstaked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ValidatorAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ValidatorAddressChanged"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ValidatorCommissionRateChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ValidatorDisabled"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ValidatorEnableMinStakeChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ValidatorEnabled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ValidatorFrozen"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ValidatorMaxCapChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ValidatorUnfrozen"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ValidatorUnstakeCooldownChanged"
  ): EventFragment;
}

export interface AllocatedTokensTakenEventObject {
  amount: BigNumber;
}
export type AllocatedTokensTakenEvent = TypedEvent<
  [BigNumber],
  AllocatedTokensTakenEventObject
>;

export type AllocatedTokensTakenEventFilter =
  TypedEventFilter<AllocatedTokensTakenEvent>;

export interface CommissionRewardRedeemedEventObject {
  validatorId: BigNumber;
  beneficiary: string;
  amount: BigNumber;
}
export type CommissionRewardRedeemedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  CommissionRewardRedeemedEventObject
>;

export type CommissionRewardRedeemedEventFilter =
  TypedEventFilter<CommissionRewardRedeemedEvent>;

export interface DelegatorMinStakeChangedEventObject {
  amount: BigNumber;
}
export type DelegatorMinStakeChangedEvent = TypedEvent<
  [BigNumber],
  DelegatorMinStakeChangedEventObject
>;

export type DelegatorMinStakeChangedEventFilter =
  TypedEventFilter<DelegatorMinStakeChangedEvent>;

export interface DelegatorUnstakeCooldownChangedEventObject {
  amount: BigNumber;
}
export type DelegatorUnstakeCooldownChangedEvent = TypedEvent<
  [BigNumber],
  DelegatorUnstakeCooldownChangedEventObject
>;

export type DelegatorUnstakeCooldownChangedEventFilter =
  TypedEventFilter<DelegatorUnstakeCooldownChangedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface InitializedSemanticsEventObject {
  cqt: string;
  validatorCoolDown: BigNumber;
  delegatorCoolDown: BigNumber;
  recoverUnstakingCoolDown: BigNumber;
  maxCapMultiplier: BigNumber;
  validatorMaxStake: BigNumber;
  validatorEnableMinStake: BigNumber;
  delegatorMinStake: BigNumber;
}
export type InitializedSemanticsEvent = TypedEvent<
  [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  InitializedSemanticsEventObject
>;

export type InitializedSemanticsEventFilter =
  TypedEventFilter<InitializedSemanticsEvent>;

export interface MaxCapMultiplierChangedEventObject {
  newMaxCapMultiplier: BigNumber;
}
export type MaxCapMultiplierChangedEvent = TypedEvent<
  [BigNumber],
  MaxCapMultiplierChangedEventObject
>;

export type MaxCapMultiplierChangedEventFilter =
  TypedEventFilter<MaxCapMultiplierChangedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface RecoverUnstakeCooldownChangedEventObject {
  amount: BigNumber;
}
export type RecoverUnstakeCooldownChangedEvent = TypedEvent<
  [BigNumber],
  RecoverUnstakeCooldownChangedEventObject
>;

export type RecoverUnstakeCooldownChangedEventFilter =
  TypedEventFilter<RecoverUnstakeCooldownChangedEvent>;

export interface RecoveredUnstakeEventObject {
  validatorId: BigNumber;
  delegator: string;
  amount: BigNumber;
  unstakingId: BigNumber;
}
export type RecoveredUnstakeEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber],
  RecoveredUnstakeEventObject
>;

export type RecoveredUnstakeEventFilter =
  TypedEventFilter<RecoveredUnstakeEvent>;

export interface RedelegatedEventObject {
  oldValidatorId: BigNumber;
  newValidatorId: BigNumber;
  delegator: string;
  amount: BigNumber;
  unstakingId: BigNumber;
}
export type RedelegatedEvent = TypedEvent<
  [BigNumber, BigNumber, string, BigNumber, BigNumber],
  RedelegatedEventObject
>;

export type RedelegatedEventFilter = TypedEventFilter<RedelegatedEvent>;

export interface RewardFailedDueValidatorDisabledEventObject {
  validatorId: BigNumber;
  amount: BigNumber;
}
export type RewardFailedDueValidatorDisabledEvent = TypedEvent<
  [BigNumber, BigNumber],
  RewardFailedDueValidatorDisabledEventObject
>;

export type RewardFailedDueValidatorDisabledEventFilter =
  TypedEventFilter<RewardFailedDueValidatorDisabledEvent>;

export interface RewardFailedDueValidatorFrozenEventObject {
  validatorId: BigNumber;
  amount: BigNumber;
}
export type RewardFailedDueValidatorFrozenEvent = TypedEvent<
  [BigNumber, BigNumber],
  RewardFailedDueValidatorFrozenEventObject
>;

export type RewardFailedDueValidatorFrozenEventFilter =
  TypedEventFilter<RewardFailedDueValidatorFrozenEvent>;

export interface RewardFailedDueZeroStakeEventObject {
  validatorId: BigNumber;
  amount: BigNumber;
}
export type RewardFailedDueZeroStakeEvent = TypedEvent<
  [BigNumber, BigNumber],
  RewardFailedDueZeroStakeEventObject
>;

export type RewardFailedDueZeroStakeEventFilter =
  TypedEventFilter<RewardFailedDueZeroStakeEvent>;

export interface RewardRedeemedEventObject {
  validatorId: BigNumber;
  beneficiary: string;
  amount: BigNumber;
}
export type RewardRedeemedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  RewardRedeemedEventObject
>;

export type RewardRedeemedEventFilter = TypedEventFilter<RewardRedeemedEvent>;

export interface RewardTokensDepositedEventObject {
  amount: BigNumber;
}
export type RewardTokensDepositedEvent = TypedEvent<
  [BigNumber],
  RewardTokensDepositedEventObject
>;

export type RewardTokensDepositedEventFilter =
  TypedEventFilter<RewardTokensDepositedEvent>;

export interface RewardsDisbursedEventObject {
  rewardId: BigNumber;
}
export type RewardsDisbursedEvent = TypedEvent<
  [BigNumber],
  RewardsDisbursedEventObject
>;

export type RewardsDisbursedEventFilter =
  TypedEventFilter<RewardsDisbursedEvent>;

export interface StakedEventObject {
  validatorId: BigNumber;
  delegator: string;
  amount: BigNumber;
}
export type StakedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  StakedEventObject
>;

export type StakedEventFilter = TypedEventFilter<StakedEvent>;

export interface StakingManagerChangedEventObject {
  operationalManager: string;
}
export type StakingManagerChangedEvent = TypedEvent<
  [string],
  StakingManagerChangedEventObject
>;

export type StakingManagerChangedEventFilter =
  TypedEventFilter<StakingManagerChangedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface UnstakeRedeemedEventObject {
  validatorId: BigNumber;
  delegator: string;
  unstakeId: BigNumber;
  amount: BigNumber;
}
export type UnstakeRedeemedEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber],
  UnstakeRedeemedEventObject
>;

export type UnstakeRedeemedEventFilter = TypedEventFilter<UnstakeRedeemedEvent>;

export interface UnstakedEventObject {
  validatorId: BigNumber;
  delegator: string;
  amount: BigNumber;
  unstakeId: BigNumber;
}
export type UnstakedEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber],
  UnstakedEventObject
>;

export type UnstakedEventFilter = TypedEventFilter<UnstakedEvent>;

export interface ValidatorAddedEventObject {
  id: BigNumber;
  commissionRate: BigNumber;
  validator: string;
}
export type ValidatorAddedEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  ValidatorAddedEventObject
>;

export type ValidatorAddedEventFilter = TypedEventFilter<ValidatorAddedEvent>;

export interface ValidatorAddressChangedEventObject {
  validatorId: BigNumber;
  newAddress: string;
}
export type ValidatorAddressChangedEvent = TypedEvent<
  [BigNumber, string],
  ValidatorAddressChangedEventObject
>;

export type ValidatorAddressChangedEventFilter =
  TypedEventFilter<ValidatorAddressChangedEvent>;

export interface ValidatorCommissionRateChangedEventObject {
  validatorId: BigNumber;
  amount: BigNumber;
}
export type ValidatorCommissionRateChangedEvent = TypedEvent<
  [BigNumber, BigNumber],
  ValidatorCommissionRateChangedEventObject
>;

export type ValidatorCommissionRateChangedEventFilter =
  TypedEventFilter<ValidatorCommissionRateChangedEvent>;

export interface ValidatorDisabledEventObject {
  validatorId: BigNumber;
  blockNumber: BigNumber;
}
export type ValidatorDisabledEvent = TypedEvent<
  [BigNumber, BigNumber],
  ValidatorDisabledEventObject
>;

export type ValidatorDisabledEventFilter =
  TypedEventFilter<ValidatorDisabledEvent>;

export interface ValidatorEnableMinStakeChangedEventObject {
  amount: BigNumber;
}
export type ValidatorEnableMinStakeChangedEvent = TypedEvent<
  [BigNumber],
  ValidatorEnableMinStakeChangedEventObject
>;

export type ValidatorEnableMinStakeChangedEventFilter =
  TypedEventFilter<ValidatorEnableMinStakeChangedEvent>;

export interface ValidatorEnabledEventObject {
  validatorId: BigNumber;
}
export type ValidatorEnabledEvent = TypedEvent<
  [BigNumber],
  ValidatorEnabledEventObject
>;

export type ValidatorEnabledEventFilter =
  TypedEventFilter<ValidatorEnabledEvent>;

export interface ValidatorFrozenEventObject {
  validatorId: BigNumber;
  reason: string;
}
export type ValidatorFrozenEvent = TypedEvent<
  [BigNumber, string],
  ValidatorFrozenEventObject
>;

export type ValidatorFrozenEventFilter = TypedEventFilter<ValidatorFrozenEvent>;

export interface ValidatorMaxCapChangedEventObject {
  amount: BigNumber;
}
export type ValidatorMaxCapChangedEvent = TypedEvent<
  [BigNumber],
  ValidatorMaxCapChangedEventObject
>;

export type ValidatorMaxCapChangedEventFilter =
  TypedEventFilter<ValidatorMaxCapChangedEvent>;

export interface ValidatorUnfrozenEventObject {
  validatorId: BigNumber;
}
export type ValidatorUnfrozenEvent = TypedEvent<
  [BigNumber],
  ValidatorUnfrozenEventObject
>;

export type ValidatorUnfrozenEventFilter =
  TypedEventFilter<ValidatorUnfrozenEvent>;

export interface ValidatorUnstakeCooldownChangedEventObject {
  amount: BigNumber;
}
export type ValidatorUnstakeCooldownChangedEvent = TypedEvent<
  [BigNumber],
  ValidatorUnstakeCooldownChangedEventObject
>;

export type ValidatorUnstakeCooldownChangedEventFilter =
  TypedEventFilter<ValidatorUnstakeCooldownChangedEvent>;

export interface OperationalStaking extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OperationalStakingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    CQT(overrides?: CallOverrides): Promise<[string]>;

    DEFAULT_DELEGATOR_MIN_STAKE(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    DEFAULT_VALIDATOR_ENABLE_MIN_STAKE(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    DIVIDER(overrides?: CallOverrides): Promise<[BigNumber]>;

    REWARD_REDEEM_THRESHOLD(overrides?: CallOverrides): Promise<[BigNumber]>;

    addValidator(
      validator: PromiseOrValue<string>,
      commissionRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    checkDelegatorExists(
      newAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    delegatorCoolDown(overrides?: CallOverrides): Promise<[BigNumber]>;

    delegatorMinStake(overrides?: CallOverrides): Promise<[BigNumber]>;

    depositRewardTokens(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    disableValidator(
      validatorId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    enableValidator(
      validatorId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    freezeValidator(
      validatorId: PromiseOrValue<BigNumberish>,
      reason: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAllValidatorsMetadata(
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[], BigNumber[], BigNumber[], BigNumber[]] & {
        addresses: string[];
        staked: BigNumber[];
        delegated: BigNumber[];
        commissionRates: BigNumber[];
        disabledAtBlocks: BigNumber[];
      }
    >;

    getDelegatorMetadata(
      delegator: PromiseOrValue<string>,
      validatorId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber[], BigNumber[]] & {
        staked: BigNumber;
        rewards: BigNumber;
        commissionEarned: BigNumber;
        unstakingAmounts: BigNumber[];
        unstakingsEndEpochs: BigNumber[];
      }
    >;

    getDelegatorTotalLocked(
      delegator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { totalValueLocked: BigNumber }>;

    getMetadata(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        CQTaddress: string;
        _stakingManager: string;
        _validatorsN: BigNumber;
        _rewardPool: BigNumber;
        _validatorCoolDown: BigNumber;
        _delegatorCoolDown: BigNumber;
        _recoverUnstakingCoolDown: BigNumber;
        _maxCapMultiplier: BigNumber;
        _validatorMaxStake: BigNumber;
        _validatorEnableMinStake: BigNumber;
        _delegatorMinStake: BigNumber;
      }
    >;

    getValidatorCompoundedStakingData(
      validatorId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { staked: BigNumber; delegated: BigNumber }
    >;

    getValidatorMetadata(
      validatorId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        _address: string;
        staked: BigNumber;
        delegated: BigNumber;
        commissionRate: BigNumber;
        disabledAtBlock: BigNumber;
      }
    >;

    getValidatorStakingData(
      validatorId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { staked: BigNumber; delegated: BigNumber }
    >;

    getValidatorsCompoundedStakes(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], boolean[], BigNumber[]] & {
        validatorIds: BigNumber[];
        isEnableds: boolean[];
        cstaked: BigNumber[];
      }
    >;

    getValidatorsMetadata(
      startId: PromiseOrValue<BigNumberish>,
      endId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[], BigNumber[], BigNumber[], BigNumber[]] & {
        addresses: string[];
        staked: BigNumber[];
        delegated: BigNumber[];
        commissionRates: BigNumber[];
        disabledAtBlocks: BigNumber[];
      }
    >;

    initialize(
      cqt: PromiseOrValue<string>,
      dCoolDown: PromiseOrValue<BigNumberish>,
      vCoolDown: PromiseOrValue<BigNumberish>,
      rCoolDown: PromiseOrValue<BigNumberish>,
      maxCapM: PromiseOrValue<BigNumberish>,
      vMaxStake: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isValidatorEnabled(
      validatorId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    maxCapMultiplier(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    recoverUnstaking(
      amount: PromiseOrValue<BigNumberish>,
      validatorId: PromiseOrValue<BigNumberish>,
      unstakingId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    recoverUnstakingCoolDown(overrides?: CallOverrides): Promise<[BigNumber]>;

    redeemAllCommission(
      validatorId: PromiseOrValue<BigNumberish>,
      beneficiary: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    redeemAllRewards(
      validatorId: PromiseOrValue<BigNumberish>,
      beneficiary: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    redeemCommission(
      validatorId: PromiseOrValue<BigNumberish>,
      beneficiary: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    redeemRewards(
      validatorId: PromiseOrValue<BigNumberish>,
      beneficiary: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    redelegateUnstaked(
      amount: PromiseOrValue<BigNumberish>,
      oldValidatorId: PromiseOrValue<BigNumberish>,
      newValidatorId: PromiseOrValue<BigNumberish>,
      unstakingId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rewardPool(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardValidators(
      rewardId: PromiseOrValue<BigNumberish>,
      ids: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDelegatorCoolDown(
      coolDown: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDelegatorMinStake(
      minStake: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMaxCapMultiplier(
      newMaxCapMultiplier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRecoverUnstakingCoolDown(
      coolDown: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setStakingManagerAddress(
      newAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setValidatorAddress(
      validatorId: PromiseOrValue<BigNumberish>,
      newAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setValidatorCommissionRate(
      validatorId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setValidatorCoolDown(
      coolDown: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setValidatorEnableMinStake(
      minStake: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setValidatorMaxStake(
      maxStake: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stake(
      validatorId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stakingManager(overrides?: CallOverrides): Promise<[string]>;

    takeOutRewardTokens(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferUnstakedOut(
      amount: PromiseOrValue<BigNumberish>,
      validatorId: PromiseOrValue<BigNumberish>,
      unstakingId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unfreezeValidator(
      validatorId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unstake(
      validatorId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unstakeAll(
      validatorId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    validatorCoolDown(overrides?: CallOverrides): Promise<[BigNumber]>;

    validatorEnableMinStake(overrides?: CallOverrides): Promise<[BigNumber]>;

    validatorMaxStake(overrides?: CallOverrides): Promise<[BigNumber]>;

    validatorsN(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  CQT(overrides?: CallOverrides): Promise<string>;

  DEFAULT_DELEGATOR_MIN_STAKE(overrides?: CallOverrides): Promise<BigNumber>;

  DEFAULT_VALIDATOR_ENABLE_MIN_STAKE(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  DIVIDER(overrides?: CallOverrides): Promise<BigNumber>;

  REWARD_REDEEM_THRESHOLD(overrides?: CallOverrides): Promise<BigNumber>;

  addValidator(
    validator: PromiseOrValue<string>,
    commissionRate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  checkDelegatorExists(
    newAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  delegatorCoolDown(overrides?: CallOverrides): Promise<BigNumber>;

  delegatorMinStake(overrides?: CallOverrides): Promise<BigNumber>;

  depositRewardTokens(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  disableValidator(
    validatorId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  enableValidator(
    validatorId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  freezeValidator(
    validatorId: PromiseOrValue<BigNumberish>,
    reason: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAllValidatorsMetadata(
    overrides?: CallOverrides
  ): Promise<
    [string[], BigNumber[], BigNumber[], BigNumber[], BigNumber[]] & {
      addresses: string[];
      staked: BigNumber[];
      delegated: BigNumber[];
      commissionRates: BigNumber[];
      disabledAtBlocks: BigNumber[];
    }
  >;

  getDelegatorMetadata(
    delegator: PromiseOrValue<string>,
    validatorId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber[], BigNumber[]] & {
      staked: BigNumber;
      rewards: BigNumber;
      commissionEarned: BigNumber;
      unstakingAmounts: BigNumber[];
      unstakingsEndEpochs: BigNumber[];
    }
  >;

  getDelegatorTotalLocked(
    delegator: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMetadata(
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      CQTaddress: string;
      _stakingManager: string;
      _validatorsN: BigNumber;
      _rewardPool: BigNumber;
      _validatorCoolDown: BigNumber;
      _delegatorCoolDown: BigNumber;
      _recoverUnstakingCoolDown: BigNumber;
      _maxCapMultiplier: BigNumber;
      _validatorMaxStake: BigNumber;
      _validatorEnableMinStake: BigNumber;
      _delegatorMinStake: BigNumber;
    }
  >;

  getValidatorCompoundedStakingData(
    validatorId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { staked: BigNumber; delegated: BigNumber }
  >;

  getValidatorMetadata(
    validatorId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
      _address: string;
      staked: BigNumber;
      delegated: BigNumber;
      commissionRate: BigNumber;
      disabledAtBlock: BigNumber;
    }
  >;

  getValidatorStakingData(
    validatorId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { staked: BigNumber; delegated: BigNumber }
  >;

  getValidatorsCompoundedStakes(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber[], boolean[], BigNumber[]] & {
      validatorIds: BigNumber[];
      isEnableds: boolean[];
      cstaked: BigNumber[];
    }
  >;

  getValidatorsMetadata(
    startId: PromiseOrValue<BigNumberish>,
    endId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string[], BigNumber[], BigNumber[], BigNumber[], BigNumber[]] & {
      addresses: string[];
      staked: BigNumber[];
      delegated: BigNumber[];
      commissionRates: BigNumber[];
      disabledAtBlocks: BigNumber[];
    }
  >;

  initialize(
    cqt: PromiseOrValue<string>,
    dCoolDown: PromiseOrValue<BigNumberish>,
    vCoolDown: PromiseOrValue<BigNumberish>,
    rCoolDown: PromiseOrValue<BigNumberish>,
    maxCapM: PromiseOrValue<BigNumberish>,
    vMaxStake: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isValidatorEnabled(
    validatorId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  maxCapMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  recoverUnstaking(
    amount: PromiseOrValue<BigNumberish>,
    validatorId: PromiseOrValue<BigNumberish>,
    unstakingId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  recoverUnstakingCoolDown(overrides?: CallOverrides): Promise<BigNumber>;

  redeemAllCommission(
    validatorId: PromiseOrValue<BigNumberish>,
    beneficiary: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  redeemAllRewards(
    validatorId: PromiseOrValue<BigNumberish>,
    beneficiary: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  redeemCommission(
    validatorId: PromiseOrValue<BigNumberish>,
    beneficiary: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  redeemRewards(
    validatorId: PromiseOrValue<BigNumberish>,
    beneficiary: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  redelegateUnstaked(
    amount: PromiseOrValue<BigNumberish>,
    oldValidatorId: PromiseOrValue<BigNumberish>,
    newValidatorId: PromiseOrValue<BigNumberish>,
    unstakingId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rewardPool(overrides?: CallOverrides): Promise<BigNumber>;

  rewardValidators(
    rewardId: PromiseOrValue<BigNumberish>,
    ids: PromiseOrValue<BigNumberish>[],
    amounts: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDelegatorCoolDown(
    coolDown: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDelegatorMinStake(
    minStake: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMaxCapMultiplier(
    newMaxCapMultiplier: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRecoverUnstakingCoolDown(
    coolDown: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setStakingManagerAddress(
    newAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setValidatorAddress(
    validatorId: PromiseOrValue<BigNumberish>,
    newAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setValidatorCommissionRate(
    validatorId: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setValidatorCoolDown(
    coolDown: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setValidatorEnableMinStake(
    minStake: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setValidatorMaxStake(
    maxStake: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stake(
    validatorId: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stakingManager(overrides?: CallOverrides): Promise<string>;

  takeOutRewardTokens(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferUnstakedOut(
    amount: PromiseOrValue<BigNumberish>,
    validatorId: PromiseOrValue<BigNumberish>,
    unstakingId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unfreezeValidator(
    validatorId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unstake(
    validatorId: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unstakeAll(
    validatorId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  validatorCoolDown(overrides?: CallOverrides): Promise<BigNumber>;

  validatorEnableMinStake(overrides?: CallOverrides): Promise<BigNumber>;

  validatorMaxStake(overrides?: CallOverrides): Promise<BigNumber>;

  validatorsN(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    CQT(overrides?: CallOverrides): Promise<string>;

    DEFAULT_DELEGATOR_MIN_STAKE(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_VALIDATOR_ENABLE_MIN_STAKE(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    DIVIDER(overrides?: CallOverrides): Promise<BigNumber>;

    REWARD_REDEEM_THRESHOLD(overrides?: CallOverrides): Promise<BigNumber>;

    addValidator(
      validator: PromiseOrValue<string>,
      commissionRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkDelegatorExists(
      newAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    delegatorCoolDown(overrides?: CallOverrides): Promise<BigNumber>;

    delegatorMinStake(overrides?: CallOverrides): Promise<BigNumber>;

    depositRewardTokens(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    disableValidator(
      validatorId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    enableValidator(
      validatorId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    freezeValidator(
      validatorId: PromiseOrValue<BigNumberish>,
      reason: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getAllValidatorsMetadata(
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[], BigNumber[], BigNumber[], BigNumber[]] & {
        addresses: string[];
        staked: BigNumber[];
        delegated: BigNumber[];
        commissionRates: BigNumber[];
        disabledAtBlocks: BigNumber[];
      }
    >;

    getDelegatorMetadata(
      delegator: PromiseOrValue<string>,
      validatorId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber[], BigNumber[]] & {
        staked: BigNumber;
        rewards: BigNumber;
        commissionEarned: BigNumber;
        unstakingAmounts: BigNumber[];
        unstakingsEndEpochs: BigNumber[];
      }
    >;

    getDelegatorTotalLocked(
      delegator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMetadata(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        CQTaddress: string;
        _stakingManager: string;
        _validatorsN: BigNumber;
        _rewardPool: BigNumber;
        _validatorCoolDown: BigNumber;
        _delegatorCoolDown: BigNumber;
        _recoverUnstakingCoolDown: BigNumber;
        _maxCapMultiplier: BigNumber;
        _validatorMaxStake: BigNumber;
        _validatorEnableMinStake: BigNumber;
        _delegatorMinStake: BigNumber;
      }
    >;

    getValidatorCompoundedStakingData(
      validatorId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { staked: BigNumber; delegated: BigNumber }
    >;

    getValidatorMetadata(
      validatorId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        _address: string;
        staked: BigNumber;
        delegated: BigNumber;
        commissionRate: BigNumber;
        disabledAtBlock: BigNumber;
      }
    >;

    getValidatorStakingData(
      validatorId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { staked: BigNumber; delegated: BigNumber }
    >;

    getValidatorsCompoundedStakes(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], boolean[], BigNumber[]] & {
        validatorIds: BigNumber[];
        isEnableds: boolean[];
        cstaked: BigNumber[];
      }
    >;

    getValidatorsMetadata(
      startId: PromiseOrValue<BigNumberish>,
      endId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[], BigNumber[], BigNumber[], BigNumber[]] & {
        addresses: string[];
        staked: BigNumber[];
        delegated: BigNumber[];
        commissionRates: BigNumber[];
        disabledAtBlocks: BigNumber[];
      }
    >;

    initialize(
      cqt: PromiseOrValue<string>,
      dCoolDown: PromiseOrValue<BigNumberish>,
      vCoolDown: PromiseOrValue<BigNumberish>,
      rCoolDown: PromiseOrValue<BigNumberish>,
      maxCapM: PromiseOrValue<BigNumberish>,
      vMaxStake: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    isValidatorEnabled(
      validatorId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    maxCapMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    recoverUnstaking(
      amount: PromiseOrValue<BigNumberish>,
      validatorId: PromiseOrValue<BigNumberish>,
      unstakingId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    recoverUnstakingCoolDown(overrides?: CallOverrides): Promise<BigNumber>;

    redeemAllCommission(
      validatorId: PromiseOrValue<BigNumberish>,
      beneficiary: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    redeemAllRewards(
      validatorId: PromiseOrValue<BigNumberish>,
      beneficiary: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    redeemCommission(
      validatorId: PromiseOrValue<BigNumberish>,
      beneficiary: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    redeemRewards(
      validatorId: PromiseOrValue<BigNumberish>,
      beneficiary: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    redelegateUnstaked(
      amount: PromiseOrValue<BigNumberish>,
      oldValidatorId: PromiseOrValue<BigNumberish>,
      newValidatorId: PromiseOrValue<BigNumberish>,
      unstakingId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rewardPool(overrides?: CallOverrides): Promise<BigNumber>;

    rewardValidators(
      rewardId: PromiseOrValue<BigNumberish>,
      ids: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setDelegatorCoolDown(
      coolDown: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDelegatorMinStake(
      minStake: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxCapMultiplier(
      newMaxCapMultiplier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRecoverUnstakingCoolDown(
      coolDown: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setStakingManagerAddress(
      newAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setValidatorAddress(
      validatorId: PromiseOrValue<BigNumberish>,
      newAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setValidatorCommissionRate(
      validatorId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setValidatorCoolDown(
      coolDown: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setValidatorEnableMinStake(
      minStake: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setValidatorMaxStake(
      maxStake: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    stake(
      validatorId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    stakingManager(overrides?: CallOverrides): Promise<string>;

    takeOutRewardTokens(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferUnstakedOut(
      amount: PromiseOrValue<BigNumberish>,
      validatorId: PromiseOrValue<BigNumberish>,
      unstakingId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    unfreezeValidator(
      validatorId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    unstake(
      validatorId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    unstakeAll(
      validatorId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    validatorCoolDown(overrides?: CallOverrides): Promise<BigNumber>;

    validatorEnableMinStake(overrides?: CallOverrides): Promise<BigNumber>;

    validatorMaxStake(overrides?: CallOverrides): Promise<BigNumber>;

    validatorsN(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "AllocatedTokensTaken(uint128)"(
      amount?: null
    ): AllocatedTokensTakenEventFilter;
    AllocatedTokensTaken(amount?: null): AllocatedTokensTakenEventFilter;

    "CommissionRewardRedeemed(uint128,address,uint128)"(
      validatorId?: PromiseOrValue<BigNumberish> | null,
      beneficiary?: PromiseOrValue<string> | null,
      amount?: null
    ): CommissionRewardRedeemedEventFilter;
    CommissionRewardRedeemed(
      validatorId?: PromiseOrValue<BigNumberish> | null,
      beneficiary?: PromiseOrValue<string> | null,
      amount?: null
    ): CommissionRewardRedeemedEventFilter;

    "DelegatorMinStakeChanged(uint128)"(
      amount?: null
    ): DelegatorMinStakeChangedEventFilter;
    DelegatorMinStakeChanged(
      amount?: null
    ): DelegatorMinStakeChangedEventFilter;

    "DelegatorUnstakeCooldownChanged(uint128)"(
      amount?: null
    ): DelegatorUnstakeCooldownChangedEventFilter;
    DelegatorUnstakeCooldownChanged(
      amount?: null
    ): DelegatorUnstakeCooldownChangedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "InitializedSemantics(address,uint128,uint128,uint128,uint128,uint128,uint128,uint128)"(
      cqt?: null,
      validatorCoolDown?: null,
      delegatorCoolDown?: null,
      recoverUnstakingCoolDown?: null,
      maxCapMultiplier?: null,
      validatorMaxStake?: null,
      validatorEnableMinStake?: null,
      delegatorMinStake?: null
    ): InitializedSemanticsEventFilter;
    InitializedSemantics(
      cqt?: null,
      validatorCoolDown?: null,
      delegatorCoolDown?: null,
      recoverUnstakingCoolDown?: null,
      maxCapMultiplier?: null,
      validatorMaxStake?: null,
      validatorEnableMinStake?: null,
      delegatorMinStake?: null
    ): InitializedSemanticsEventFilter;

    "MaxCapMultiplierChanged(uint128)"(
      newMaxCapMultiplier?: null
    ): MaxCapMultiplierChangedEventFilter;
    MaxCapMultiplierChanged(
      newMaxCapMultiplier?: null
    ): MaxCapMultiplierChangedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "RecoverUnstakeCooldownChanged(uint128)"(
      amount?: null
    ): RecoverUnstakeCooldownChangedEventFilter;
    RecoverUnstakeCooldownChanged(
      amount?: null
    ): RecoverUnstakeCooldownChangedEventFilter;

    "RecoveredUnstake(uint128,address,uint128,uint128)"(
      validatorId?: PromiseOrValue<BigNumberish> | null,
      delegator?: PromiseOrValue<string> | null,
      amount?: null,
      unstakingId?: null
    ): RecoveredUnstakeEventFilter;
    RecoveredUnstake(
      validatorId?: PromiseOrValue<BigNumberish> | null,
      delegator?: PromiseOrValue<string> | null,
      amount?: null,
      unstakingId?: null
    ): RecoveredUnstakeEventFilter;

    "Redelegated(uint128,uint128,address,uint128,uint128)"(
      oldValidatorId?: PromiseOrValue<BigNumberish> | null,
      newValidatorId?: PromiseOrValue<BigNumberish> | null,
      delegator?: PromiseOrValue<string> | null,
      amount?: null,
      unstakingId?: null
    ): RedelegatedEventFilter;
    Redelegated(
      oldValidatorId?: PromiseOrValue<BigNumberish> | null,
      newValidatorId?: PromiseOrValue<BigNumberish> | null,
      delegator?: PromiseOrValue<string> | null,
      amount?: null,
      unstakingId?: null
    ): RedelegatedEventFilter;

    "RewardFailedDueValidatorDisabled(uint128,uint128)"(
      validatorId?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): RewardFailedDueValidatorDisabledEventFilter;
    RewardFailedDueValidatorDisabled(
      validatorId?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): RewardFailedDueValidatorDisabledEventFilter;

    "RewardFailedDueValidatorFrozen(uint128,uint128)"(
      validatorId?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): RewardFailedDueValidatorFrozenEventFilter;
    RewardFailedDueValidatorFrozen(
      validatorId?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): RewardFailedDueValidatorFrozenEventFilter;

    "RewardFailedDueZeroStake(uint128,uint128)"(
      validatorId?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): RewardFailedDueZeroStakeEventFilter;
    RewardFailedDueZeroStake(
      validatorId?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): RewardFailedDueZeroStakeEventFilter;

    "RewardRedeemed(uint128,address,uint128)"(
      validatorId?: PromiseOrValue<BigNumberish> | null,
      beneficiary?: PromiseOrValue<string> | null,
      amount?: null
    ): RewardRedeemedEventFilter;
    RewardRedeemed(
      validatorId?: PromiseOrValue<BigNumberish> | null,
      beneficiary?: PromiseOrValue<string> | null,
      amount?: null
    ): RewardRedeemedEventFilter;

    "RewardTokensDeposited(uint128)"(
      amount?: null
    ): RewardTokensDepositedEventFilter;
    RewardTokensDeposited(amount?: null): RewardTokensDepositedEventFilter;

    "RewardsDisbursed(uint128)"(
      rewardId?: PromiseOrValue<BigNumberish> | null
    ): RewardsDisbursedEventFilter;
    RewardsDisbursed(
      rewardId?: PromiseOrValue<BigNumberish> | null
    ): RewardsDisbursedEventFilter;

    "Staked(uint128,address,uint128)"(
      validatorId?: PromiseOrValue<BigNumberish> | null,
      delegator?: null,
      amount?: null
    ): StakedEventFilter;
    Staked(
      validatorId?: PromiseOrValue<BigNumberish> | null,
      delegator?: null,
      amount?: null
    ): StakedEventFilter;

    "StakingManagerChanged(address)"(
      operationalManager?: PromiseOrValue<string> | null
    ): StakingManagerChangedEventFilter;
    StakingManagerChanged(
      operationalManager?: PromiseOrValue<string> | null
    ): StakingManagerChangedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "UnstakeRedeemed(uint128,address,uint128,uint128)"(
      validatorId?: PromiseOrValue<BigNumberish> | null,
      delegator?: PromiseOrValue<string> | null,
      unstakeId?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): UnstakeRedeemedEventFilter;
    UnstakeRedeemed(
      validatorId?: PromiseOrValue<BigNumberish> | null,
      delegator?: PromiseOrValue<string> | null,
      unstakeId?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): UnstakeRedeemedEventFilter;

    "Unstaked(uint128,address,uint128,uint128)"(
      validatorId?: PromiseOrValue<BigNumberish> | null,
      delegator?: PromiseOrValue<string> | null,
      amount?: null,
      unstakeId?: null
    ): UnstakedEventFilter;
    Unstaked(
      validatorId?: PromiseOrValue<BigNumberish> | null,
      delegator?: PromiseOrValue<string> | null,
      amount?: null,
      unstakeId?: null
    ): UnstakedEventFilter;

    "ValidatorAdded(uint128,uint128,address)"(
      id?: PromiseOrValue<BigNumberish> | null,
      commissionRate?: null,
      validator?: PromiseOrValue<string> | null
    ): ValidatorAddedEventFilter;
    ValidatorAdded(
      id?: PromiseOrValue<BigNumberish> | null,
      commissionRate?: null,
      validator?: PromiseOrValue<string> | null
    ): ValidatorAddedEventFilter;

    "ValidatorAddressChanged(uint128,address)"(
      validatorId?: PromiseOrValue<BigNumberish> | null,
      newAddress?: PromiseOrValue<string> | null
    ): ValidatorAddressChangedEventFilter;
    ValidatorAddressChanged(
      validatorId?: PromiseOrValue<BigNumberish> | null,
      newAddress?: PromiseOrValue<string> | null
    ): ValidatorAddressChangedEventFilter;

    "ValidatorCommissionRateChanged(uint128,uint128)"(
      validatorId?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): ValidatorCommissionRateChangedEventFilter;
    ValidatorCommissionRateChanged(
      validatorId?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): ValidatorCommissionRateChangedEventFilter;

    "ValidatorDisabled(uint128,uint256)"(
      validatorId?: PromiseOrValue<BigNumberish> | null,
      blockNumber?: null
    ): ValidatorDisabledEventFilter;
    ValidatorDisabled(
      validatorId?: PromiseOrValue<BigNumberish> | null,
      blockNumber?: null
    ): ValidatorDisabledEventFilter;

    "ValidatorEnableMinStakeChanged(uint128)"(
      amount?: null
    ): ValidatorEnableMinStakeChangedEventFilter;
    ValidatorEnableMinStakeChanged(
      amount?: null
    ): ValidatorEnableMinStakeChangedEventFilter;

    "ValidatorEnabled(uint128)"(
      validatorId?: PromiseOrValue<BigNumberish> | null
    ): ValidatorEnabledEventFilter;
    ValidatorEnabled(
      validatorId?: PromiseOrValue<BigNumberish> | null
    ): ValidatorEnabledEventFilter;

    "ValidatorFrozen(uint128,string)"(
      validatorId?: PromiseOrValue<BigNumberish> | null,
      reason?: null
    ): ValidatorFrozenEventFilter;
    ValidatorFrozen(
      validatorId?: PromiseOrValue<BigNumberish> | null,
      reason?: null
    ): ValidatorFrozenEventFilter;

    "ValidatorMaxCapChanged(uint128)"(
      amount?: null
    ): ValidatorMaxCapChangedEventFilter;
    ValidatorMaxCapChanged(amount?: null): ValidatorMaxCapChangedEventFilter;

    "ValidatorUnfrozen(uint128)"(
      validatorId?: PromiseOrValue<BigNumberish> | null
    ): ValidatorUnfrozenEventFilter;
    ValidatorUnfrozen(
      validatorId?: PromiseOrValue<BigNumberish> | null
    ): ValidatorUnfrozenEventFilter;

    "ValidatorUnstakeCooldownChanged(uint128)"(
      amount?: null
    ): ValidatorUnstakeCooldownChangedEventFilter;
    ValidatorUnstakeCooldownChanged(
      amount?: null
    ): ValidatorUnstakeCooldownChangedEventFilter;
  };

  estimateGas: {
    CQT(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_DELEGATOR_MIN_STAKE(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_VALIDATOR_ENABLE_MIN_STAKE(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    DIVIDER(overrides?: CallOverrides): Promise<BigNumber>;

    REWARD_REDEEM_THRESHOLD(overrides?: CallOverrides): Promise<BigNumber>;

    addValidator(
      validator: PromiseOrValue<string>,
      commissionRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    checkDelegatorExists(
      newAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    delegatorCoolDown(overrides?: CallOverrides): Promise<BigNumber>;

    delegatorMinStake(overrides?: CallOverrides): Promise<BigNumber>;

    depositRewardTokens(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    disableValidator(
      validatorId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    enableValidator(
      validatorId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    freezeValidator(
      validatorId: PromiseOrValue<BigNumberish>,
      reason: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAllValidatorsMetadata(overrides?: CallOverrides): Promise<BigNumber>;

    getDelegatorMetadata(
      delegator: PromiseOrValue<string>,
      validatorId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDelegatorTotalLocked(
      delegator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMetadata(overrides?: CallOverrides): Promise<BigNumber>;

    getValidatorCompoundedStakingData(
      validatorId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getValidatorMetadata(
      validatorId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getValidatorStakingData(
      validatorId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getValidatorsCompoundedStakes(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getValidatorsMetadata(
      startId: PromiseOrValue<BigNumberish>,
      endId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      cqt: PromiseOrValue<string>,
      dCoolDown: PromiseOrValue<BigNumberish>,
      vCoolDown: PromiseOrValue<BigNumberish>,
      rCoolDown: PromiseOrValue<BigNumberish>,
      maxCapM: PromiseOrValue<BigNumberish>,
      vMaxStake: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isValidatorEnabled(
      validatorId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxCapMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    recoverUnstaking(
      amount: PromiseOrValue<BigNumberish>,
      validatorId: PromiseOrValue<BigNumberish>,
      unstakingId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    recoverUnstakingCoolDown(overrides?: CallOverrides): Promise<BigNumber>;

    redeemAllCommission(
      validatorId: PromiseOrValue<BigNumberish>,
      beneficiary: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    redeemAllRewards(
      validatorId: PromiseOrValue<BigNumberish>,
      beneficiary: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    redeemCommission(
      validatorId: PromiseOrValue<BigNumberish>,
      beneficiary: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    redeemRewards(
      validatorId: PromiseOrValue<BigNumberish>,
      beneficiary: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    redelegateUnstaked(
      amount: PromiseOrValue<BigNumberish>,
      oldValidatorId: PromiseOrValue<BigNumberish>,
      newValidatorId: PromiseOrValue<BigNumberish>,
      unstakingId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rewardPool(overrides?: CallOverrides): Promise<BigNumber>;

    rewardValidators(
      rewardId: PromiseOrValue<BigNumberish>,
      ids: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDelegatorCoolDown(
      coolDown: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDelegatorMinStake(
      minStake: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMaxCapMultiplier(
      newMaxCapMultiplier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRecoverUnstakingCoolDown(
      coolDown: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setStakingManagerAddress(
      newAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setValidatorAddress(
      validatorId: PromiseOrValue<BigNumberish>,
      newAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setValidatorCommissionRate(
      validatorId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setValidatorCoolDown(
      coolDown: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setValidatorEnableMinStake(
      minStake: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setValidatorMaxStake(
      maxStake: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stake(
      validatorId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stakingManager(overrides?: CallOverrides): Promise<BigNumber>;

    takeOutRewardTokens(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferUnstakedOut(
      amount: PromiseOrValue<BigNumberish>,
      validatorId: PromiseOrValue<BigNumberish>,
      unstakingId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unfreezeValidator(
      validatorId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unstake(
      validatorId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unstakeAll(
      validatorId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    validatorCoolDown(overrides?: CallOverrides): Promise<BigNumber>;

    validatorEnableMinStake(overrides?: CallOverrides): Promise<BigNumber>;

    validatorMaxStake(overrides?: CallOverrides): Promise<BigNumber>;

    validatorsN(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    CQT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEFAULT_DELEGATOR_MIN_STAKE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DEFAULT_VALIDATOR_ENABLE_MIN_STAKE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DIVIDER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    REWARD_REDEEM_THRESHOLD(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addValidator(
      validator: PromiseOrValue<string>,
      commissionRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    checkDelegatorExists(
      newAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    delegatorCoolDown(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    delegatorMinStake(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositRewardTokens(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    disableValidator(
      validatorId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    enableValidator(
      validatorId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    freezeValidator(
      validatorId: PromiseOrValue<BigNumberish>,
      reason: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAllValidatorsMetadata(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDelegatorMetadata(
      delegator: PromiseOrValue<string>,
      validatorId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDelegatorTotalLocked(
      delegator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMetadata(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getValidatorCompoundedStakingData(
      validatorId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getValidatorMetadata(
      validatorId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getValidatorStakingData(
      validatorId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getValidatorsCompoundedStakes(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getValidatorsMetadata(
      startId: PromiseOrValue<BigNumberish>,
      endId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      cqt: PromiseOrValue<string>,
      dCoolDown: PromiseOrValue<BigNumberish>,
      vCoolDown: PromiseOrValue<BigNumberish>,
      rCoolDown: PromiseOrValue<BigNumberish>,
      maxCapM: PromiseOrValue<BigNumberish>,
      vMaxStake: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isValidatorEnabled(
      validatorId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxCapMultiplier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recoverUnstaking(
      amount: PromiseOrValue<BigNumberish>,
      validatorId: PromiseOrValue<BigNumberish>,
      unstakingId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    recoverUnstakingCoolDown(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    redeemAllCommission(
      validatorId: PromiseOrValue<BigNumberish>,
      beneficiary: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    redeemAllRewards(
      validatorId: PromiseOrValue<BigNumberish>,
      beneficiary: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    redeemCommission(
      validatorId: PromiseOrValue<BigNumberish>,
      beneficiary: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    redeemRewards(
      validatorId: PromiseOrValue<BigNumberish>,
      beneficiary: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    redelegateUnstaked(
      amount: PromiseOrValue<BigNumberish>,
      oldValidatorId: PromiseOrValue<BigNumberish>,
      newValidatorId: PromiseOrValue<BigNumberish>,
      unstakingId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rewardPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardValidators(
      rewardId: PromiseOrValue<BigNumberish>,
      ids: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDelegatorCoolDown(
      coolDown: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDelegatorMinStake(
      minStake: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMaxCapMultiplier(
      newMaxCapMultiplier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRecoverUnstakingCoolDown(
      coolDown: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setStakingManagerAddress(
      newAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setValidatorAddress(
      validatorId: PromiseOrValue<BigNumberish>,
      newAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setValidatorCommissionRate(
      validatorId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setValidatorCoolDown(
      coolDown: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setValidatorEnableMinStake(
      minStake: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setValidatorMaxStake(
      maxStake: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stake(
      validatorId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stakingManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    takeOutRewardTokens(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferUnstakedOut(
      amount: PromiseOrValue<BigNumberish>,
      validatorId: PromiseOrValue<BigNumberish>,
      unstakingId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unfreezeValidator(
      validatorId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unstake(
      validatorId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unstakeAll(
      validatorId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    validatorCoolDown(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    validatorEnableMinStake(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validatorMaxStake(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    validatorsN(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
