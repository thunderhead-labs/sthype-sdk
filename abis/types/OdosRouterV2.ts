/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace OdosRouterV2 {
  export type SwapTokenInfoStruct = {
    inputToken: PromiseOrValue<string>;
    inputAmount: PromiseOrValue<BigNumberish>;
    inputReceiver: PromiseOrValue<string>;
    outputToken: PromiseOrValue<string>;
    outputQuote: PromiseOrValue<BigNumberish>;
    outputMin: PromiseOrValue<BigNumberish>;
    outputReceiver: PromiseOrValue<string>;
  };

  export type SwapTokenInfoStructOutput = [
    string,
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber,
    string
  ] & {
    inputToken: string;
    inputAmount: BigNumber;
    inputReceiver: string;
    outputToken: string;
    outputQuote: BigNumber;
    outputMin: BigNumber;
    outputReceiver: string;
  };

  export type InputTokenInfoStruct = {
    tokenAddress: PromiseOrValue<string>;
    amountIn: PromiseOrValue<BigNumberish>;
    receiver: PromiseOrValue<string>;
  };

  export type InputTokenInfoStructOutput = [string, BigNumber, string] & {
    tokenAddress: string;
    amountIn: BigNumber;
    receiver: string;
  };

  export type OutputTokenInfoStruct = {
    tokenAddress: PromiseOrValue<string>;
    relativeValue: PromiseOrValue<BigNumberish>;
    receiver: PromiseOrValue<string>;
  };

  export type OutputTokenInfoStructOutput = [string, BigNumber, string] & {
    tokenAddress: string;
    relativeValue: BigNumber;
    receiver: string;
  };

  export type Permit2InfoStruct = {
    contractAddress: PromiseOrValue<string>;
    nonce: PromiseOrValue<BigNumberish>;
    deadline: PromiseOrValue<BigNumberish>;
    signature: PromiseOrValue<BytesLike>;
  };

  export type Permit2InfoStructOutput = [
    string,
    BigNumber,
    BigNumber,
    string
  ] & {
    contractAddress: string;
    nonce: BigNumber;
    deadline: BigNumber;
    signature: string;
  };
}

export interface OdosRouterV2Interface extends utils.Interface {
  functions: {
    "FEE_DENOM()": FunctionFragment;
    "REFERRAL_WITH_FEE_THRESHOLD()": FunctionFragment;
    "addressList(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "referralLookup(uint32)": FunctionFragment;
    "registerReferralCode(uint32,uint64,address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setSwapMultiFee(uint256)": FunctionFragment;
    "swap((address,uint256,address,address,uint256,uint256,address),bytes,address,uint32)": FunctionFragment;
    "swapCompact()": FunctionFragment;
    "swapMulti((address,uint256,address)[],(address,uint256,address)[],uint256,bytes,address,uint32)": FunctionFragment;
    "swapMultiCompact()": FunctionFragment;
    "swapMultiFee()": FunctionFragment;
    "swapMultiPermit2((address,uint256,uint256,bytes),(address,uint256,address)[],(address,uint256,address)[],uint256,bytes,address,uint32)": FunctionFragment;
    "swapPermit2((address,uint256,uint256,bytes),(address,uint256,address,address,uint256,uint256,address),bytes,address,uint32)": FunctionFragment;
    "swapRouterFunds((address,uint256,address)[],(address,uint256,address)[],uint256,bytes,address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "transferRouterFunds(address[],uint256[],address)": FunctionFragment;
    "writeAddressList(address[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "FEE_DENOM"
      | "REFERRAL_WITH_FEE_THRESHOLD"
      | "addressList"
      | "owner"
      | "referralLookup"
      | "registerReferralCode"
      | "renounceOwnership"
      | "setSwapMultiFee"
      | "swap"
      | "swapCompact"
      | "swapMulti"
      | "swapMultiCompact"
      | "swapMultiFee"
      | "swapMultiPermit2"
      | "swapPermit2"
      | "swapRouterFunds"
      | "transferOwnership"
      | "transferRouterFunds"
      | "writeAddressList"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "FEE_DENOM", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "REFERRAL_WITH_FEE_THRESHOLD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addressList",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "referralLookup",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerReferralCode",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setSwapMultiFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [
      OdosRouterV2.SwapTokenInfoStruct,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapCompact",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapMulti",
    values: [
      OdosRouterV2.InputTokenInfoStruct[],
      OdosRouterV2.OutputTokenInfoStruct[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapMultiCompact",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapMultiFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapMultiPermit2",
    values: [
      OdosRouterV2.Permit2InfoStruct,
      OdosRouterV2.InputTokenInfoStruct[],
      OdosRouterV2.OutputTokenInfoStruct[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapPermit2",
    values: [
      OdosRouterV2.Permit2InfoStruct,
      OdosRouterV2.SwapTokenInfoStruct,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapRouterFunds",
    values: [
      OdosRouterV2.InputTokenInfoStruct[],
      OdosRouterV2.OutputTokenInfoStruct[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferRouterFunds",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "writeAddressList",
    values: [PromiseOrValue<string>[]]
  ): string;

  decodeFunctionResult(functionFragment: "FEE_DENOM", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "REFERRAL_WITH_FEE_THRESHOLD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addressList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "referralLookup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerReferralCode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSwapMultiFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapCompact",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swapMulti", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapMultiCompact",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapMultiFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapMultiPermit2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapPermit2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapRouterFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferRouterFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "writeAddressList",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "Swap(address,uint256,address,uint256,address,int256,uint32)": EventFragment;
    "SwapMulti(address,uint256[],address[],uint256[],address[],uint32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Swap"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapMulti"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface SwapEventObject {
  sender: string;
  inputAmount: BigNumber;
  inputToken: string;
  amountOut: BigNumber;
  outputToken: string;
  slippage: BigNumber;
  referralCode: number;
}
export type SwapEvent = TypedEvent<
  [string, BigNumber, string, BigNumber, string, BigNumber, number],
  SwapEventObject
>;

export type SwapEventFilter = TypedEventFilter<SwapEvent>;

export interface SwapMultiEventObject {
  sender: string;
  amountsIn: BigNumber[];
  tokensIn: string[];
  amountsOut: BigNumber[];
  tokensOut: string[];
  referralCode: number;
}
export type SwapMultiEvent = TypedEvent<
  [string, BigNumber[], string[], BigNumber[], string[], number],
  SwapMultiEventObject
>;

export type SwapMultiEventFilter = TypedEventFilter<SwapMultiEvent>;

export interface OdosRouterV2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OdosRouterV2Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    FEE_DENOM(overrides?: CallOverrides): Promise<[BigNumber]>;

    REFERRAL_WITH_FEE_THRESHOLD(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    addressList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    referralLookup(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, boolean] & {
        referralFee: BigNumber;
        beneficiary: string;
        registered: boolean;
      }
    >;

    registerReferralCode(
      _referralCode: PromiseOrValue<BigNumberish>,
      _referralFee: PromiseOrValue<BigNumberish>,
      _beneficiary: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSwapMultiFee(
      _swapMultiFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swap(
      tokenInfo: OdosRouterV2.SwapTokenInfoStruct,
      pathDefinition: PromiseOrValue<BytesLike>,
      executor: PromiseOrValue<string>,
      referralCode: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapCompact(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapMulti(
      inputs: OdosRouterV2.InputTokenInfoStruct[],
      outputs: OdosRouterV2.OutputTokenInfoStruct[],
      valueOutMin: PromiseOrValue<BigNumberish>,
      pathDefinition: PromiseOrValue<BytesLike>,
      executor: PromiseOrValue<string>,
      referralCode: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapMultiCompact(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapMultiFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    swapMultiPermit2(
      permit2: OdosRouterV2.Permit2InfoStruct,
      inputs: OdosRouterV2.InputTokenInfoStruct[],
      outputs: OdosRouterV2.OutputTokenInfoStruct[],
      valueOutMin: PromiseOrValue<BigNumberish>,
      pathDefinition: PromiseOrValue<BytesLike>,
      executor: PromiseOrValue<string>,
      referralCode: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapPermit2(
      permit2: OdosRouterV2.Permit2InfoStruct,
      tokenInfo: OdosRouterV2.SwapTokenInfoStruct,
      pathDefinition: PromiseOrValue<BytesLike>,
      executor: PromiseOrValue<string>,
      referralCode: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapRouterFunds(
      inputs: OdosRouterV2.InputTokenInfoStruct[],
      outputs: OdosRouterV2.OutputTokenInfoStruct[],
      valueOutMin: PromiseOrValue<BigNumberish>,
      pathDefinition: PromiseOrValue<BytesLike>,
      executor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferRouterFunds(
      tokens: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      dest: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    writeAddressList(
      addresses: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  FEE_DENOM(overrides?: CallOverrides): Promise<BigNumber>;

  REFERRAL_WITH_FEE_THRESHOLD(overrides?: CallOverrides): Promise<BigNumber>;

  addressList(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  referralLookup(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, boolean] & {
      referralFee: BigNumber;
      beneficiary: string;
      registered: boolean;
    }
  >;

  registerReferralCode(
    _referralCode: PromiseOrValue<BigNumberish>,
    _referralFee: PromiseOrValue<BigNumberish>,
    _beneficiary: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSwapMultiFee(
    _swapMultiFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swap(
    tokenInfo: OdosRouterV2.SwapTokenInfoStruct,
    pathDefinition: PromiseOrValue<BytesLike>,
    executor: PromiseOrValue<string>,
    referralCode: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapCompact(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapMulti(
    inputs: OdosRouterV2.InputTokenInfoStruct[],
    outputs: OdosRouterV2.OutputTokenInfoStruct[],
    valueOutMin: PromiseOrValue<BigNumberish>,
    pathDefinition: PromiseOrValue<BytesLike>,
    executor: PromiseOrValue<string>,
    referralCode: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapMultiCompact(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapMultiFee(overrides?: CallOverrides): Promise<BigNumber>;

  swapMultiPermit2(
    permit2: OdosRouterV2.Permit2InfoStruct,
    inputs: OdosRouterV2.InputTokenInfoStruct[],
    outputs: OdosRouterV2.OutputTokenInfoStruct[],
    valueOutMin: PromiseOrValue<BigNumberish>,
    pathDefinition: PromiseOrValue<BytesLike>,
    executor: PromiseOrValue<string>,
    referralCode: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapPermit2(
    permit2: OdosRouterV2.Permit2InfoStruct,
    tokenInfo: OdosRouterV2.SwapTokenInfoStruct,
    pathDefinition: PromiseOrValue<BytesLike>,
    executor: PromiseOrValue<string>,
    referralCode: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapRouterFunds(
    inputs: OdosRouterV2.InputTokenInfoStruct[],
    outputs: OdosRouterV2.OutputTokenInfoStruct[],
    valueOutMin: PromiseOrValue<BigNumberish>,
    pathDefinition: PromiseOrValue<BytesLike>,
    executor: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferRouterFunds(
    tokens: PromiseOrValue<string>[],
    amounts: PromiseOrValue<BigNumberish>[],
    dest: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  writeAddressList(
    addresses: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    FEE_DENOM(overrides?: CallOverrides): Promise<BigNumber>;

    REFERRAL_WITH_FEE_THRESHOLD(overrides?: CallOverrides): Promise<BigNumber>;

    addressList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    referralLookup(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, boolean] & {
        referralFee: BigNumber;
        beneficiary: string;
        registered: boolean;
      }
    >;

    registerReferralCode(
      _referralCode: PromiseOrValue<BigNumberish>,
      _referralFee: PromiseOrValue<BigNumberish>,
      _beneficiary: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setSwapMultiFee(
      _swapMultiFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    swap(
      tokenInfo: OdosRouterV2.SwapTokenInfoStruct,
      pathDefinition: PromiseOrValue<BytesLike>,
      executor: PromiseOrValue<string>,
      referralCode: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapCompact(overrides?: CallOverrides): Promise<BigNumber>;

    swapMulti(
      inputs: OdosRouterV2.InputTokenInfoStruct[],
      outputs: OdosRouterV2.OutputTokenInfoStruct[],
      valueOutMin: PromiseOrValue<BigNumberish>,
      pathDefinition: PromiseOrValue<BytesLike>,
      executor: PromiseOrValue<string>,
      referralCode: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    swapMultiCompact(overrides?: CallOverrides): Promise<BigNumber[]>;

    swapMultiFee(overrides?: CallOverrides): Promise<BigNumber>;

    swapMultiPermit2(
      permit2: OdosRouterV2.Permit2InfoStruct,
      inputs: OdosRouterV2.InputTokenInfoStruct[],
      outputs: OdosRouterV2.OutputTokenInfoStruct[],
      valueOutMin: PromiseOrValue<BigNumberish>,
      pathDefinition: PromiseOrValue<BytesLike>,
      executor: PromiseOrValue<string>,
      referralCode: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    swapPermit2(
      permit2: OdosRouterV2.Permit2InfoStruct,
      tokenInfo: OdosRouterV2.SwapTokenInfoStruct,
      pathDefinition: PromiseOrValue<BytesLike>,
      executor: PromiseOrValue<string>,
      referralCode: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapRouterFunds(
      inputs: OdosRouterV2.InputTokenInfoStruct[],
      outputs: OdosRouterV2.OutputTokenInfoStruct[],
      valueOutMin: PromiseOrValue<BigNumberish>,
      pathDefinition: PromiseOrValue<BytesLike>,
      executor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferRouterFunds(
      tokens: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      dest: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    writeAddressList(
      addresses: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Swap(address,uint256,address,uint256,address,int256,uint32)"(
      sender?: null,
      inputAmount?: null,
      inputToken?: null,
      amountOut?: null,
      outputToken?: null,
      slippage?: null,
      referralCode?: null
    ): SwapEventFilter;
    Swap(
      sender?: null,
      inputAmount?: null,
      inputToken?: null,
      amountOut?: null,
      outputToken?: null,
      slippage?: null,
      referralCode?: null
    ): SwapEventFilter;

    "SwapMulti(address,uint256[],address[],uint256[],address[],uint32)"(
      sender?: null,
      amountsIn?: null,
      tokensIn?: null,
      amountsOut?: null,
      tokensOut?: null,
      referralCode?: null
    ): SwapMultiEventFilter;
    SwapMulti(
      sender?: null,
      amountsIn?: null,
      tokensIn?: null,
      amountsOut?: null,
      tokensOut?: null,
      referralCode?: null
    ): SwapMultiEventFilter;
  };

  estimateGas: {
    FEE_DENOM(overrides?: CallOverrides): Promise<BigNumber>;

    REFERRAL_WITH_FEE_THRESHOLD(overrides?: CallOverrides): Promise<BigNumber>;

    addressList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    referralLookup(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerReferralCode(
      _referralCode: PromiseOrValue<BigNumberish>,
      _referralFee: PromiseOrValue<BigNumberish>,
      _beneficiary: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSwapMultiFee(
      _swapMultiFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swap(
      tokenInfo: OdosRouterV2.SwapTokenInfoStruct,
      pathDefinition: PromiseOrValue<BytesLike>,
      executor: PromiseOrValue<string>,
      referralCode: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapCompact(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapMulti(
      inputs: OdosRouterV2.InputTokenInfoStruct[],
      outputs: OdosRouterV2.OutputTokenInfoStruct[],
      valueOutMin: PromiseOrValue<BigNumberish>,
      pathDefinition: PromiseOrValue<BytesLike>,
      executor: PromiseOrValue<string>,
      referralCode: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapMultiCompact(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapMultiFee(overrides?: CallOverrides): Promise<BigNumber>;

    swapMultiPermit2(
      permit2: OdosRouterV2.Permit2InfoStruct,
      inputs: OdosRouterV2.InputTokenInfoStruct[],
      outputs: OdosRouterV2.OutputTokenInfoStruct[],
      valueOutMin: PromiseOrValue<BigNumberish>,
      pathDefinition: PromiseOrValue<BytesLike>,
      executor: PromiseOrValue<string>,
      referralCode: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapPermit2(
      permit2: OdosRouterV2.Permit2InfoStruct,
      tokenInfo: OdosRouterV2.SwapTokenInfoStruct,
      pathDefinition: PromiseOrValue<BytesLike>,
      executor: PromiseOrValue<string>,
      referralCode: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapRouterFunds(
      inputs: OdosRouterV2.InputTokenInfoStruct[],
      outputs: OdosRouterV2.OutputTokenInfoStruct[],
      valueOutMin: PromiseOrValue<BigNumberish>,
      pathDefinition: PromiseOrValue<BytesLike>,
      executor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferRouterFunds(
      tokens: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      dest: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    writeAddressList(
      addresses: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    FEE_DENOM(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    REFERRAL_WITH_FEE_THRESHOLD(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addressList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    referralLookup(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerReferralCode(
      _referralCode: PromiseOrValue<BigNumberish>,
      _referralFee: PromiseOrValue<BigNumberish>,
      _beneficiary: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSwapMultiFee(
      _swapMultiFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swap(
      tokenInfo: OdosRouterV2.SwapTokenInfoStruct,
      pathDefinition: PromiseOrValue<BytesLike>,
      executor: PromiseOrValue<string>,
      referralCode: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapCompact(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapMulti(
      inputs: OdosRouterV2.InputTokenInfoStruct[],
      outputs: OdosRouterV2.OutputTokenInfoStruct[],
      valueOutMin: PromiseOrValue<BigNumberish>,
      pathDefinition: PromiseOrValue<BytesLike>,
      executor: PromiseOrValue<string>,
      referralCode: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapMultiCompact(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapMultiFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swapMultiPermit2(
      permit2: OdosRouterV2.Permit2InfoStruct,
      inputs: OdosRouterV2.InputTokenInfoStruct[],
      outputs: OdosRouterV2.OutputTokenInfoStruct[],
      valueOutMin: PromiseOrValue<BigNumberish>,
      pathDefinition: PromiseOrValue<BytesLike>,
      executor: PromiseOrValue<string>,
      referralCode: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapPermit2(
      permit2: OdosRouterV2.Permit2InfoStruct,
      tokenInfo: OdosRouterV2.SwapTokenInfoStruct,
      pathDefinition: PromiseOrValue<BytesLike>,
      executor: PromiseOrValue<string>,
      referralCode: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapRouterFunds(
      inputs: OdosRouterV2.InputTokenInfoStruct[],
      outputs: OdosRouterV2.OutputTokenInfoStruct[],
      valueOutMin: PromiseOrValue<BigNumberish>,
      pathDefinition: PromiseOrValue<BytesLike>,
      executor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferRouterFunds(
      tokens: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      dest: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    writeAddressList(
      addresses: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
