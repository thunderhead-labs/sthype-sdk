/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace Burner {
  export type Burn_Struct = {
    user: PromiseOrValue<string>;
    amount: PromiseOrValue<BigNumberish>;
    completed: PromiseOrValue<boolean>;
  };

  export type Burn_StructOutput = [string, BigNumber, boolean] & {
    user: string;
    amount: BigNumber;
    completed: boolean;
  };
}

export interface BurnerInterface extends utils.Interface {
  functions: {
    "_acceptGov()": FunctionFragment;
    "_setPendingGov(address)": FunctionFragment;
    "balance()": FunctionFragment;
    "burn(uint256)": FunctionFragment;
    "burns(uint256)": FunctionFragment;
    "deposit(uint256)": FunctionFragment;
    "emergencyWithdraw(uint256,address)": FunctionFragment;
    "flip()": FunctionFragment;
    "getAllBurns()": FunctionFragment;
    "getBurns(address)": FunctionFragment;
    "gov()": FunctionFragment;
    "govWithdraw(uint256)": FunctionFragment;
    "pendingGov()": FunctionFragment;
    "redeem(uint256)": FunctionFragment;
    "redeemable(uint256)": FunctionFragment;
    "reedemed()": FunctionFragment;
    "stflip()": FunctionFragment;
    "subtract(uint256,uint256)": FunctionFragment;
    "sums(uint256)": FunctionFragment;
    "totalPendingBurns()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_acceptGov"
      | "_setPendingGov"
      | "balance"
      | "burn"
      | "burns"
      | "deposit"
      | "emergencyWithdraw"
      | "flip"
      | "getAllBurns"
      | "getBurns"
      | "gov"
      | "govWithdraw"
      | "pendingGov"
      | "redeem"
      | "redeemable"
      | "reedemed"
      | "stflip"
      | "subtract"
      | "sums"
      | "totalPendingBurns"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "_acceptGov",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_setPendingGov",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "balance", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "burns",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "flip", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAllBurns",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBurns",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "gov", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "govWithdraw",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingGov",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemable",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "reedemed", values?: undefined): string;
  encodeFunctionData(functionFragment: "stflip", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "subtract",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "sums",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalPendingBurns",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "_acceptGov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_setPendingGov",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burns", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "flip", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllBurns",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBurns", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "govWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pendingGov", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "redeemable", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reedemed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stflip", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "subtract", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sums", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalPendingBurns",
    data: BytesLike
  ): Result;

  events: {
    "Burn(uint256,uint256)": EventFragment;
    "NewGov(address,address)": EventFragment;
    "NewPendingGov(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Burn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewGov"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewPendingGov"): EventFragment;
}

export interface BurnEventObject {
  amount: BigNumber;
  burn_id: BigNumber;
}
export type BurnEvent = TypedEvent<[BigNumber, BigNumber], BurnEventObject>;

export type BurnEventFilter = TypedEventFilter<BurnEvent>;

export interface NewGovEventObject {
  oldGov: string;
  newGov: string;
}
export type NewGovEvent = TypedEvent<[string, string], NewGovEventObject>;

export type NewGovEventFilter = TypedEventFilter<NewGovEvent>;

export interface NewPendingGovEventObject {
  oldPendingGov: string;
  newPendingGov: string;
}
export type NewPendingGovEvent = TypedEvent<
  [string, string],
  NewPendingGovEventObject
>;

export type NewPendingGovEventFilter = TypedEventFilter<NewPendingGovEvent>;

export interface Burner extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BurnerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _acceptGov(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _setPendingGov(
      pendingGov_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    balance(overrides?: CallOverrides): Promise<[BigNumber]>;

    burn(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    burns(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, boolean] & {
        user: string;
        amount: BigNumber;
        completed: boolean;
      }
    >;

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    emergencyWithdraw(
      amount: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    flip(overrides?: CallOverrides): Promise<[string]>;

    getAllBurns(
      overrides?: CallOverrides
    ): Promise<[Burner.Burn_StructOutput[]]>;

    getBurns(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[Burner.Burn_StructOutput[], BigNumber[], boolean[]]>;

    gov(overrides?: CallOverrides): Promise<[string]>;

    govWithdraw(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pendingGov(overrides?: CallOverrides): Promise<[string]>;

    redeem(
      burn_id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    redeemable(
      burn_id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    reedemed(overrides?: CallOverrides): Promise<[BigNumber]>;

    stflip(overrides?: CallOverrides): Promise<[string]>;

    subtract(
      a: PromiseOrValue<BigNumberish>,
      b: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    sums(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalPendingBurns(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  _acceptGov(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _setPendingGov(
    pendingGov_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  balance(overrides?: CallOverrides): Promise<BigNumber>;

  burn(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  burns(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, boolean] & {
      user: string;
      amount: BigNumber;
      completed: boolean;
    }
  >;

  deposit(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  emergencyWithdraw(
    amount: PromiseOrValue<BigNumberish>,
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  flip(overrides?: CallOverrides): Promise<string>;

  getAllBurns(overrides?: CallOverrides): Promise<Burner.Burn_StructOutput[]>;

  getBurns(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[Burner.Burn_StructOutput[], BigNumber[], boolean[]]>;

  gov(overrides?: CallOverrides): Promise<string>;

  govWithdraw(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pendingGov(overrides?: CallOverrides): Promise<string>;

  redeem(
    burn_id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  redeemable(
    burn_id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  reedemed(overrides?: CallOverrides): Promise<BigNumber>;

  stflip(overrides?: CallOverrides): Promise<string>;

  subtract(
    a: PromiseOrValue<BigNumberish>,
    b: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  sums(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalPendingBurns(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    _acceptGov(overrides?: CallOverrides): Promise<void>;

    _setPendingGov(
      pendingGov_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    balance(overrides?: CallOverrides): Promise<BigNumber>;

    burn(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burns(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, boolean] & {
        user: string;
        amount: BigNumber;
        completed: boolean;
      }
    >;

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    emergencyWithdraw(
      amount: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    flip(overrides?: CallOverrides): Promise<string>;

    getAllBurns(overrides?: CallOverrides): Promise<Burner.Burn_StructOutput[]>;

    getBurns(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[Burner.Burn_StructOutput[], BigNumber[], boolean[]]>;

    gov(overrides?: CallOverrides): Promise<string>;

    govWithdraw(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    pendingGov(overrides?: CallOverrides): Promise<string>;

    redeem(
      burn_id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    redeemable(
      burn_id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    reedemed(overrides?: CallOverrides): Promise<BigNumber>;

    stflip(overrides?: CallOverrides): Promise<string>;

    subtract(
      a: PromiseOrValue<BigNumberish>,
      b: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sums(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalPendingBurns(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "Burn(uint256,uint256)"(amount?: null, burn_id?: null): BurnEventFilter;
    Burn(amount?: null, burn_id?: null): BurnEventFilter;

    "NewGov(address,address)"(oldGov?: null, newGov?: null): NewGovEventFilter;
    NewGov(oldGov?: null, newGov?: null): NewGovEventFilter;

    "NewPendingGov(address,address)"(
      oldPendingGov?: null,
      newPendingGov?: null
    ): NewPendingGovEventFilter;
    NewPendingGov(
      oldPendingGov?: null,
      newPendingGov?: null
    ): NewPendingGovEventFilter;
  };

  estimateGas: {
    _acceptGov(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _setPendingGov(
      pendingGov_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    balance(overrides?: CallOverrides): Promise<BigNumber>;

    burn(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    burns(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    emergencyWithdraw(
      amount: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    flip(overrides?: CallOverrides): Promise<BigNumber>;

    getAllBurns(overrides?: CallOverrides): Promise<BigNumber>;

    getBurns(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gov(overrides?: CallOverrides): Promise<BigNumber>;

    govWithdraw(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pendingGov(overrides?: CallOverrides): Promise<BigNumber>;

    redeem(
      burn_id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    redeemable(
      burn_id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reedemed(overrides?: CallOverrides): Promise<BigNumber>;

    stflip(overrides?: CallOverrides): Promise<BigNumber>;

    subtract(
      a: PromiseOrValue<BigNumberish>,
      b: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sums(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalPendingBurns(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    _acceptGov(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _setPendingGov(
      pendingGov_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    balance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    burn(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    burns(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    emergencyWithdraw(
      amount: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    flip(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllBurns(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBurns(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gov(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    govWithdraw(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pendingGov(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeem(
      burn_id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    redeemable(
      burn_id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reedemed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stflip(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    subtract(
      a: PromiseOrValue<BigNumberish>,
      b: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sums(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalPendingBurns(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
